<section id="head-wrapper">
  <section id="homepage-top">
    <h1>Backbone.js Q&amp;A Live Chat &ndash; October 14, 2011</h1>
    <section id="course-info">
    <h2>Rough notes: behind-the-scenes content</h2>

      <section>
        <p><em>From the chat speaker, Jason Morrison:</em></p>

        <p>I asked folks who had purchased the <a href="http://workshops.thoughtbot.com/backbone-js-on-rails">Backbone.js on Rails eBook</a> to submit questions prior to the talk, so they had time to form well-developed, articulate questions and so I had time to consider my response and prepare resources.  Below, I've included my full and unedited set of submitted questions and notes.  The audio includes full discussions of these topics, for which much of the notes below serve only as a starting point.</p>

      </section>

      <section id="backbone-js-on-rails-qa-live-chat-full-notes">
        <h3>Brian Pokosh:</h3>

        <p>1.) File uploads Just general advice. I haven't found much out there on the
        topic. I'm not sure if it's because it's a trivial task to complete (and I'm
        just missing something) or if it's not something a lot of people need from
        backbone.</p>

        <p>AJAX upload separately and first, return a token to identify the upload, then
        merge that into model attributes to save.</p>

        <p><a href="https://github.com/moxiecode/plupload">https://github.com/moxiecode/plupload</a></p>

        <h3>Justin Ball:</h3>

        <p>1.) I have an instance where the JSON I get from the server contains a single
        parent object with multiple child objects. How do I best map these into a
        parent-child relationship of models in backbone.js or is that even possible?</p>

        <p>Override parse() or use Backbone-relational
        <a href="https://github.com/PaulUithol/Backbone-relational">https://github.com/PaulUithol/Backbone-relational</a></p>

        <p>2.) Looking for a best practice on how granular should views be. For example, if
        I have a view with a table should I then have another view that renders the rows
        of the table. What if the rows then need to render yet another view? How deep
        should I let this go before I commit hara kiri? Is it bad practice to connect my
        views to html already on the page or should I always be using templates?</p>

        <p>When to nest:</p>

        <ul>
          <li>Compose if view logic/behavior needs to split for SRP</li>
          <li>...</li>
        </ul>

        <p>Connect views to HTML on-page:</p>

        <ul>
          <li>Not necessarily bad, though I generally avoid it.  Realize that this is</li>
          <li>creating an external dependency.  Think about where/when you may want to reuse</li>
          <li>that view, because its setup (dependencies) is now more complex.  This comes</li>
          <li>out in testing, too.</li>
        </ul>

        <p>3.) What's the best way to handle nested models and relationships between models.
        Are there 3rd parties libraries that you recommend?</p>

        <p>(Addressed with Q#1)</p>

        <p>4.) How do I best use require.js with backbone.js</p>

        <ul>
          <li>Haven't used it, have used jammit, sprockets, but from reading briefly it</li>
          <li>seems require.js should work as it normally does when including backbone as a</li>
          <li>module dependency.</li>
        </ul>

        <h3>Kevin Marsh</h3>

        <p>1.) What are some good resources to learn from? It seems the "best practices" of
        using Backbone &amp; Rails together are in their infancy. Where should one turn for
        the latest, greatest methodology? Sample apps of various complexities are
        especially helpful.</p>

        <ul>
          <li>Official docs <a href="http://documentcloud.github.com/backbone/">http://documentcloud.github.com/backbone/</a></li>
          <li>Annotated sourcecode <a href="http://documentcloud.github.com/backbone/docs/backbone.html">http://documentcloud.github.com/backbone/docs/backbone.html</a></li>
          <li>IRC #documentcloud</li>
          <li><a href="https://groups.google.com/group/backbonejs">https://groups.google.com/group/backbonejs</a></li>
          <li><a href="http://jayunit.net/backbone-js-on-rails-talk/">http://jayunit.net/backbone-js-on-rails-talk/</a></li>
        </ul>

        <p>https://github.com/jasonm/chat_app was designed to be small but approach a few
        Rails/Backbone integration points (Rails only auth, passing that into backbone,
        JSON bootstrapping and JSON API fetches, eventually push integration)</p>

        <p>2.) How do you handle pagination?</p>

        <p>What are the concerns of pagination?</p>

        <ul>
          <li>Displaying one page UI for navigating pagination Fetching subset from server</li>
          <li>Hooking these together</li>
        </ul>

        <p>I haven't dealt with pagination yet, but general approach, encapsulate resource
        range in a collection, abstract this with a paginated collection (or mixable
        module):</p>

        <p><a href="https://gist.github.com/705733">https://gist.github.com/705733</a></p>

        <p>This is a good opportunity to write a plugin
        <a href="https://github.com/documentcloud/backbone/wiki/Extensions%2C-Plugins%2C-Resources">https://github.com/documentcloud/backbone/wiki/Extensions%2C-Plugins%2C-Resources</a></p>

        <p>3.) Backbone "views" and Rails "views" are not alike. How are they different?
        (from what I can gather, Backbone "views" are more like controller actions and
        not simply templates as Rails views are...)</p>

        <p>Backbone views are objects which:</p>

        <ul>
          <li>encapsulate presentation logic,</li>
          <li>bind to interface events</li>
          <li>optionally manage child views.</li>
        </ul>

        <p>Generally BB views delegate to templates, which more analagous to rails views</p>

        <h3>Sumit Gupta</h3>

        <p>1.) Any really clean ways to manage forms especially with nested attributes?   At
        the moment I build associations a la thoughtobts book and just make sure any
        nested attributes is part of the models attributes has on save (
        "association<em>name"</em>attributes).  I've realized some avenues to refactor it but
        wanted to see if there's any established best practices for it. </p>

        <p>Best work I've found yet is: https://github.com/powmedia/backbone-forms but it
        still needs more development.  It's workable, supports nesting, type conversion,
        but has a few open issues I'd like to address before recommending it.</p>

        <p>2.) Setting up i18n support</p>

        <p><a href="https://github.com/fnando/i18n-js">https://github.com/fnando/i18n-js</a></p>

        <p>3.) File upload practices.  I have an image as one of the attributes and a
        separate rails action that supports the file upload for it through Uploadify.
        Just seems like there could be a better way. </p>

        <p>That's been our approach, too.  Backbone.save can't currently send a file upload
        to the server like other attributes.  Possible to include this in .save()?</p>

        <p>4.) Robust testing without DOM duplication in the tests. </p>

        <ul>
          <li>Integration testing</li>
          <li>Isolation testing of views - if they depend on existing markup, it's harder to
            test.  Also a code smell; let the view class be responsible for its markup.</li>
        </ul>

        <h3>Dumitru Glavan</h3>

        <p>1.) So, we are building a restful SPA with Backbone.js and jQuery on frontend and
        Rails on backend. Our app will have to handle lots of request on backend side as
        we'll have some user data that will update continuously. Besides that, we'll
        integrate a realtime chat.  We are thinking about using web sockets in our app.
        But we don't need web socket communication for all our Ajax requests. So we came
        up with the solution to have somehow a modular application, separated in 3
        parts: </p>

        <p>1.1.) One default rails app that will handle the assets, auth, geolocation and
        other common rails tasks.
        1.2.) One event based part of the app that will respond to a huge amount of
        requests, querying the realtime user data update (native Ruby to be faster, no
        Rails)
        1.3.) One event based part that will handle the chat requests (native Ruby to be
        faster, no Rails)</p>

        <p>Depending on how you push to clients, you'll also certainly want separate
        processes for your AJAX API backend and the websocket backend; blocking vs
        nonblocking and occupying workers.</p>

        <p>2.) Do you think this is a good idea to separate the app in 3 modules? If so, can
        you advice us please how to structure the entire app? Where should all the
        modules go to make our app insanely scalable as we plan to have millions of
        users in the future?</p>

        <p>3.) What kind of asynchronous backend engine do you recommend for this?
        EventMachine, Pusher etc?</p>

        <p>I would consider: Socket.IO, Faye/Juggernaut, Pusherapp.</p>

        <ul>
          <li>Concern: Pusher and owning your infrastructure, automated tests vs external
            dependencies, if you write your own accurate fake just write your own infrastructure</li>
          <li>Extensibility, authenticating channels, running on Ruby and JS</li>
          <li>Thread on Faye vs Juggernaut vs Socket.IO <a href="http://stackoverflow.com/questions/4893720/faye-vs-socket-io-and-juggernaut">http://stackoverflow.com/questions/4893720/faye-vs-socket-io-and-juggernaut</a></li>
        </ul>

        <p>4.) What solution do you recommend for our chat (at least what kind of database)?</p>

        <p>Super general question.  Depending on your durability and querying needs, you
        could use none, or consider redis or mongo.</p>

        <p>5.) As we'll use web sockets can you recommend a plugin for Backbone.js please? I
        worked with Socket.IO on frontend and backend with NodeJS. Seems to be pretty
        powerful. How can we integrate it with Backbone.js?</p>

        <p>People ask about Backbone.sync with websockets, but synchronization over
        websocket (evented, initiated by clients or server) is different than
        persistence (client-initiated request/response) so I think it'd be difficult to
        write a general plugin.</p>

        <p>Since this persistence will be evented, and Backbone plays very well in an
        evented environment, I'd write another object whose resp. is binding your
        websocket events to effect backbone behavior.</p>

        <ul>
          <li>Rails/Faye (websocket) sync code: <a href="https://github.com/jasonm/backbone_sync-rails">https://github.com/jasonm/backbone_sync-rails</a></li>
          <li>Fork to support pusherapp: <a href="https://github.com/logankoester/backbone_sync-rails">https://github.com/logankoester/backbone_sync-rails</a></li>
        </ul>

        <p>6.) Are there still memory leaks in Backbone when rendering views inside other views (as you described in your book)?</p>

        <p>There are not leaks in BB itself, but it's easy to make them in your BB code:</p>

        <ul>
          <li><a href="http://lostechies.com/derickbailey/2011/09/15/zombies-run-managing-page-transitions-in-backbone-apps/">http://lostechies.com/derickbailey/2011/09/15/zombies-run-managing-page-transitions-in-backbone-apps/</a></li>
          <li><a href="http://stackoverflow.com/questions/7715666/possible-memory-leaks-in-internet-explorer-7-backbone">http://stackoverflow.com/questions/7715666/possible-memory-leaks-in-internet-explorer-7-backbone</a></li>
          <li><a href="https://groups.google.com/group/backbonejs/browse_thread/thread/dd9166fa5b5e37e0">https://groups.google.com/group/backbonejs/browse_thread/thread/dd9166fa5b5e37e0</a></li>
        </ul>

        <p>7.) What tools do you recommend for BDD on frontend? I'm using EnvJasmine atm
        that is a bit slow and besides that it's not working well with Sinon. I don't
        think it's the best solution for us. Can you please give us an advice on this?</p>

        <p>We've had success using Jasmine, sinon, jasmine-sinon, jasmine-jquery</p>

        <ul>
          <li><a href="http://pivotal.github.com/jasmine/">http://pivotal.github.com/jasmine/</a></li>
          <li><a href="http://sinonjs.org/">http://sinonjs.org/</a></li>
          <li><a href="https://github.com/froots/jasmine-sinon">https://github.com/froots/jasmine-sinon</a></li>
          <li><a href="https://github.com/velesin/jasmine-jquery">https://github.com/velesin/jasmine-jquery</a></li>
        </ul>

        <p>Assuming your Backbone app is embedded in your rails app:</p>

        <ul>
          <li>jasminerice: <a href="https://github.com/bradphelan/jasminerice">https://github.com/bradphelan/jasminerice</a></li>
        </ul>

        <p>Whether there's Rails or not:</p>

        <ul>
          <li>Nice but I haven't gotten into a groove, headless and autotest-y:
            <a href="https://github.com/netzpirat/guard-jasmine">https://github.com/netzpirat/guard-jasmine</a></li>
          <li>Alternative to autotesting but in-browser:
            <a href="https://github.com/guard/guard-livereload">https://github.com/guard/guard-livereload</a></li>
        </ul>

        <h3>Darío Javier Cravero:</h3>

        <p>1.) How would you handle related components that are part of a workflow? I.e., if I have a workflow defined by a set of steps, which structure would you propose in terms of Views/Routers in order to handle the flow? How would you handle the change between states if needed?</p>

        <p>An approach I've implemented so far is to have a router that talks to a master
        view which knows about children views. Master handles the communication between
        steps and the children implement each step. In some complex workflows, a
        particular step can be implemented by different children, depending on a
        previously selected option.</p>

        <p>The main issue I've encountered is cleaning everything up to allow the workflow
        to be reused. Nevertheless, it could be good to hear alternatives to that
        implementation.</p>

        <p>A few considerations: separation of concerns, decoupling the view classes</p>

        <p>A few approaches: with routing or without routing.  why use routing?  tokenized
        representation of app state, do you need to bookmark &amp; re-enter?</p>

        <p>There are separate responsibilities, e.g. having an orchestrator separate from
        individual steps.</p>

        <p>2.) How would you implement lazy loading of collections? And sorting? Ive seen
        the examples you provide about sorting a collection where you return a new one
        but all of those seem to be implemented with the premise that the data is
        already there and there's no need to query a backend to get an accurate result.</p>

        <p>Pagination from earlier touches on this.  Similar approach: create a collection
        which encapsulates this concern.</p>

        <p>To put it as an example. Let's say you have a Person model with a name and a
        surname. By default it comes ordered by its name and you get the first "page"
        of, let's say 10 people. The total count is 100.</p>

        <p>At a particular point of the app, you display a list of people sorted by
        surname. This list is lazy loaded and is shown using infinite scrolling. If you
        can't be sure that you have all the records on the collection, a simple
        comparator wouldn't work because you might be missing records. What's the best
        way to go about this? Should a query go back to the backend asking for the first
        page of records with a particular sorting (perhaps redefining fetch to include
        some extra params?) and inserting (perhaps using parse?) the missing records
        (note that we may already have some of them)? This means that the collection's
        order will change and will be kept as its "state". What do you think of this?
        How would you go about it?</p>

        <h3>Russell Jones:</h3>

        <p>1.) I'd love to hear your thoughts on patterns for binding a view's form elements to its model attributes. I've looked at plugins like Synapse but ended up just doing my own thing.</p>

        <ul>
          <li><a href="https://github.com/bruth/synapse">https://github.com/bruth/synapse</a></li>
          <li><a href="https://github.com/derickbailey/backbone.modelbinding">https://github.com/derickbailey/backbone.modelbinding</a></li>
        </ul>
      </section>
    </section>

    <section id="workshop-details">
      <section id="register">
        <h3>Download the audio in two parts:</h3>
        &nbsp;
        <!-- TODO: Once files are processed, upload to S3 or something and update links -->
        <p class="highlight"><a href="https://thoughtbot.basecamphq.com/projects/2220516/file/99065146/Backbone%20js-Part%201ss.m4a">Part 1: DRM-free AAC, 60 minutes</a></p>
        &nbsp;
        <p class="highlight"><a href="https://thoughtbot.basecamphq.com/projects/2220516/file/99065147/Backbone%20js-Part%202_ss.m4a">Part 2: DRM-free AAC, 38 minutes</a></p>
      </section>
    </section>

  </section>
</section>



<div id="flash"></div>








