# Autogenerated from a Treetop grammar. Edits may be lost.


module Cucumber
  module Parser
    module Common
      include Treetop::Runtime

      def root
        @root || :white
      end

      def _nt_white
        start_index = index
        if node_cache[:white].has_key?(index)
          cached = node_cache[:white][index]
          @index = cached.interval.end if cached
          return cached
        end

        s0, i0 = [], index
        loop do
          i1 = index
          r2 = _nt_space
          if r2
            r1 = r2
          else
            r3 = _nt_eol
            if r3
              r1 = r3
            else
              @index = i1
              r1 = nil
            end
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

        node_cache[:white][start_index] = r0

        r0
      end

      def _nt_space
        start_index = index
        if node_cache[:space].has_key?(index)
          cached = node_cache[:space][index]
          @index = cached.interval.end if cached
          return cached
        end

        if has_terminal?('\G[ \\t]', true, index)
          r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          r0 = nil
        end

        node_cache[:space][start_index] = r0

        r0
      end

      module Eol0
      end

      def _nt_eol
        start_index = index
        if node_cache[:eol].has_key?(index)
          cached = node_cache[:eol][index]
          @index = cached.interval.end if cached
          return cached
        end

        i0 = index
        if has_terminal?("\n", false, index)
          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r1 = nil
        end
        if r1
          r0 = r1
        else
          i2, s2 = index, []
          if has_terminal?("\r", false, index)
            r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\r")
            r3 = nil
          end
          s2 << r3
          if r3
            if has_terminal?("\n", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("\n")
              r5 = nil
            end
            if r5
              r4 = r5
            else
              r4 = instantiate_node(SyntaxNode,input, index...index)
            end
            s2 << r4
          end
          if s2.last
            r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
            r2.extend(Eol0)
          else
            @index = i2
            r2 = nil
          end
          if r2
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:eol][start_index] = r0

        r0
      end

      def _nt_eof
        start_index = index
        if node_cache[:eof].has_key?(index)
          cached = node_cache[:eof][index]
          @index = cached.interval.end if cached
          return cached
        end

        i0 = index
        if index < input_length
          r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("any character")
          r1 = nil
        end
        if r1
          r0 = nil
        else
          @index = i0
          r0 = instantiate_node(SyntaxNode,input, index...index)
        end

        node_cache[:eof][start_index] = r0

        r0
      end

    end

    class CommonParser < Treetop::Runtime::CompiledParser
      include Common
    end

  end
end