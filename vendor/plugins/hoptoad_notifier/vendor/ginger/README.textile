Ginger is a small gem that allows you to test your projects using multiple versions of gem libraries. The idea is from "Ian White's garlic":http://github.com/ianwhite/garlic/tree - hence the related name of this - but my approach is a bit different, since I don't test my plugins from within a rails application. Maybe they can be merged at some point - I just hacked this up quickly to fit my needs.

To get it all working, you need to do four things. The first is, of course, to install this gem.

<pre><code>sudo gem install freelancing-god-ginger --source=http://gems.github.com</code></pre>

Next, add the following line of code to your @spec_helper.rb@ file (or equivalent):

<pre><code>require 'ginger'</code></pre>

You'll want to put it as high up as possible - in particular, before any @require@ calls to libraries you want to cover multiple versions of.

Step number three is creating the sets of scenarios in a file called @ginger_scenarios.rb@, which should go in the root, spec or test directory of your project. Here's an example, showing off the syntax possibilities.

<pre><code>require 'ginger'

Ginger.configure do |config|
  config.aliases["active_record"] = "activerecord"
  
  ar_1_2_6 = Ginger::Scenario.new
  ar_1_2_6[/^active_?record$/] = "1.15.6"
  
  ar_2_0_2 = Ginger::Scenario.new
  ar_2_0_2[/^active_?record$/] = "2.0.2"
  
  ar_2_1_1 = Ginger::Scenario.new
  ar_2_1_1[/^active_?record$/] = "2.1.1"
  
  config.scenarios << ar_1_2_6 << ar_2_0_2 << ar_2_1_1
end</code></pre>

Above, I've added three different scenarios, for three different versions of ActiveRecord. I also added an alias, as people sometimes use the underscore, and sometimes don't. The gem's name has no underscore though, so the _value_ of the alias matches the gem name (whereas the key would be alternative usage).

You can have multiple gems set in each scenario - and you don't have to use regular expressions, you can just use straight strings.

<pre><code>sphinx_scenario = Ginger::Scenario.new
sphinx_scenario["riddle"] = "0.9.8"
sphinx_scenario["thinking_sphinx"] = "0.9.8"</code></pre>

Don't forget to add them to @config@'s scenarios collection, else they're not saved anywhere.

And finally, you'll want to run the tests or specs for each scenario. This is done using the @ginger@ CLI tool, which parrots whatever parameters you give it onto @rake@. So just do something like:

<pre><code>ginger spec
ginger test
ginger spec:unit</code></pre>

h2. Contributors

* "Adam Meehan":http://duckpunching.com/
