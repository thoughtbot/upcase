Active Record Basics
====================

Active Record is a design pattern that mitigates the mind-numbing mental gymnastics often needed to get your application to communicate with a database. This guide uses a mix of real-world examples, metaphors and detailed explanations of the actual Rails source code to help you make the most of ActiveRecord.

After reading this guide readers should have a strong grasp of the Active Record pattern and how it can be used with or without Rails. Hopefully, some of the philosophical and theoretical intentions discussed here will also make them a stronger and better developer.

== ORM The Blueprint of Active Record

If Active Record is the engine of Rails then ORM is the blueprint of that engine. ORM is short for “Object Relational Mapping” and is a programming concept used to make structures within a system relational. As a thought experiment imagine the components that make up a typical car. There are doors, seats, windows, engines etc. Viewed independently they are simple parts, yet when bolted together through the aid of a blueprint, the parts become a more complex device. ORM is the blueprint that describes how the individual parts relate to one another and in some cases infers the part’s purpose through the way the associations are described.

== Active Record The Engine of Rails

Active Record is a design pattern used to access data within a database. The name “Active Record” was coined by Martin Fowler in his book “Patterns of Enterprise Application Architecture”. Essentially, when a record is returned from the database instead of being just the data it is wrapped in a class, which gives you methods to control that data with. The rails framework is built around the MVC (Model View Controller) design patten and the Active Record is used as the default Model. 

The Rails community added several useful concepts to their version of Active Record, including inheritance and associations, which are extremely useful for web applications. The associations are created by using a DSL (domain specific language) of macros, and inheritance is achieved through the use of STI (Single Table Inheritance) at the database level.

By following a few simple conventions the Rails Active Record will automatically map between:

* Classes & Database Tables
* Class attributes & Database Table Columns

=== Rails Active Record Conventions
Here are the key conventions to consider when using Active Record.

==== Naming Conventions
Database Table - Plural with underscores separating words i.e. (book_clubs)
Model Class - Singular with the first letter of each word capitalized i.e. (BookClub) 
Here are some additional Examples:

[grid="all"]
`-------------`---------------
Model / Class Table / Schema
----------------------------
Post          posts
LineItem      line_items
Deer          deer
Mouse         mice
Person        people
----------------------------

==== Schema Conventions

To take advantage of some of the magic of Rails database tables must be modeled 
to reflect the ORM decisions that Rails makes.

[grid="all"]
`-------------`---------------------------------------------------------------------------------
Convention
-------------------------------------------------------------------------------------------------
Foreign keys  These fields are named table_id i.e. (item_id, order_id)
Primary Key   Rails automatically creates a primary key column named "id" unless told otherwise.
-------------------------------------------------------------------------------------------------

==== Magic Field Names

When these optional fields are used in your database table definition they give the Active Record
instance additional features. 

NOTE: While these column names are optional they are in fact reserved by ActiveRecord. Steer clear of reserved keywords unless you want the extra functionality. For example, "type" is a reserved keyword
used to designate a table using Single Table Inheritance. If you are not using STI, try an analogous 
keyword like "context", that may still accurately describe the data you are modeling.

[grid="all"]
`------------------------`------------------------------------------------------------------------------
Attribute                 Purpose
------------------------------------------------------------------------------------------------------
created_at / created_on  Rails stores the current date & time to this field when creating the record.
updated_at / updated_on  Rails stores the current date & time to this field when updating the record.
lock_version             Adds optimistic locking to a model link:http://api.rubyonrails.com/classes/ActiveRecord/Locking.html[more about optimistic locking].
type                     Specifies that the model uses Single Table Inheritance link:http://api.rubyonrails.com/classes/ActiveRecord/Base.html[more about STI].
id                       All models require an id. the default is name is "id" but can be changed using the "set_primary_key" or "primary_key" methods.
_table_name_\_count       Can be used to caches the number of belonging objects on the associated class.
------------------------------------------------------------------------------------------------------

By default rails assumes all tables will use “id” as their primary key to identify each record. Though fortunately you won’t have explicitly declare this, Rails will automatically create that field unless you tell it not to.

For example suppose you created a database table called cars:

[source, sql]
-------------------------------------------------------
mysql> CREATE TABLE cars (
         id INT,
         color VARCHAR(100),
         doors INT,
         horses INT,
         model VARCHAR(100)
       );
-------------------------------------------------------

Now you created a class named Car, which is to represent an instance of a record from your table. 

[source, ruby]
------------------------------------------------------- 
class Car
end
-------------------------------------------------------

As you might expect without defining the explicit mappings between your class and the table it is impossible for Rails or any other program to correctly map those relationships.

[source, ruby]
-------------------------------------------------------
>> c = Car.new
=> #<Class:0x11e1e90>
>> c.doors
NoMethodError: undefined method `doors' for #<Class:0x11e1e90>
        from (irb):2
-------------------------------------------------------

Now you could define a door methods to write and read data to and from the database. In a nutshell this is what ActiveRecord does. According to the Rails API: 
“Active Record objects don‘t specify their attributes directly, but rather infer them from the table definition with which they‘re linked. Adding, removing, and changing attributes and their type is done directly in the database. Any change is instantly reflected in the Active Record objects. The mapping that binds a given Active Record class to a certain database table will happen automatically in most common cases, but can be overwritten for the uncommon ones.”
Lets try our Car class again, this time inheriting from ActiveRecord.

[source, ruby]
-------------------------------------------------------
class Car < ActiveRecord::Base
end
-------------------------------------------------------

Now if we try to access an attribute of the table ActiveRecord automatically handles the mappings for us, as you can see in the following example.

[source, ruby]
-------------------------------------------------------
>> c = Car.new
=> #<Car id: nil, doors: nil, color: nil, horses: nil, model: nil>
>> c.doors
=> nil
-------------------------------------------------------

Rails further extends this model by giving each ActiveRecord a way of describing the variety of ways records are associated with one another. We will touch on some of these associations later in the guide but I encourage readers who are interested to read the guide to ActiveRecord associations for an in-depth explanation of the variety of ways rails can model associations.
- Associations between objects controlled by meta-programming macros.

== Philosophical Approaches & Common Conventions
Rails has a reputation of being a zero-config  framework which means that it aims to get you off the ground with as little pre-flight checking as possible. This speed benefit is achieved by following “Convention over Configuration”, which is to say that if you agree to live with the defaults then you benefit from a the inherent speed-boost. As Courtneay Gasking put it to me once “You don’t want to off-road on Rails”. ActiveRecord is no different, while it’s possible to override or subvert any of the conventions of AR, unless you have a good reason for doing so you will probably be happy with the defaults. The following is a list of the common conventions of ActiveRecord

== ActiveRecord Magic
 - timestamps
 - updates

== How ActiveRecord Maps your Database.
- sensible defaults
- overriding conventions

== Growing Your Database Relationships Naturally

== Attributes
 - attribute accessor method. How to override them?
 - attribute?
 - dirty records
 - 
== ActiveRecord handling the CRUD of your Rails application - Understanding the life-cycle of an ActiveRecord

== Validations & Callbacks
- Validations
    *  create!
    * validates_acceptance_of
    * validates_associated
    * validates_confirmation_of
    * validates_each
    * validates_exclusion_of
    * validates_format_of
    * validates_inclusion_of
    * validates_length_of
    * validates_numericality_of
    * validates_presence_of
    * validates_size_of
    * validates_uniqueness_of
 - Callback
    * (-) save
    * (-) valid
    * (1) before_validation
    * (2) before_validation_on_create
    * (-) validate
    * (-) validate_on_create
    * (3) after_validation
    * (4) after_validation_on_create
    * (5) before_save
    * (6) before_create
    * (-) create
    * (7) after_create
    * (8) after_save
